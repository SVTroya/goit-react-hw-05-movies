{"version":3,"file":"static/js/922.a5b9cebb.chunk.js","mappings":"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","sources":["components/MovieSearch/MovieSearch.styled.jsx","components/MovieSearch/MovieSearch.jsx","components/Movies/Movies.styled.jsx","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","components/Movies/Movies.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieSearchForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-top: 30px;\n  align-items: center;\n\n  label {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    margin: -1px;\n    border: 0;\n    padding: 0;\n    white-space: nowrap;\n    clip-path: inset(100%);\n    clip: rect(0 0 0 0);\n    overflow: hidden;\n  }\n\n  input {\n    width: 400px;\n    height: 60px;\n    border: 2px solid #2e2f42;\n    border-radius: 15px;\n    padding: 8px 16px;\n    font-size: 20px;\n    background-color: var(--color-card-bckg);\n  }\n\n  input:focus, input:hover {\n    border: 2px solid tomato;\n    outline: none;\n  }\n\n  button {\n    margin-top: 20px;\n    width: 50px;\n    height: 50px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 50%;\n    border: none;\n    transform: scale(1);\n    box-shadow: 2px 2px 4px 2px #212121, inset 0 0 10px 2px rgba(148, 148, 148, 0.78);\n    color:#2e2f42;\n\n    transition: transform 250ms ease-in-out,\n    color 250ms ease-in-out,\n    box-shadow 250ms ease-in-out;\n\n    svg{\n      pointer-events: none;\n    }\n  }\n\n  button:hover, button:focus {\n    transform: scale(1.3);\n    color: tomato;\n    box-shadow: 3px 3px 5px 3px #212121, inset 0 0 10px 2px rgba(148, 148, 148, 0.78);\n  }\n`;\n","import { MovieSearchForm } from './MovieSearch.styled';\nimport { FaMagnifyingGlass } from 'react-icons/fa6';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByQuery } from '../../services/moviesApi';\nimport Movies from '../Movies/Movies';\n\nfunction MovieSearch() {\n  const [movieNameInput, setMovieNameInput] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [showNothingFoundMsg, setShowNothingFoundMsg] = useState(false);\n\n  const query = searchParams.get('query') ?? '';\n\n  const getData = useCallback(async (query) => {\n    const data = await fetchMoviesByQuery(query);\n    if (data.length === 0) {\n      setShowNothingFoundMsg(true);\n    }\n    setMovies(data);\n  }, []);\n\n  useEffect(() => {\n    try {\n      if (query.trim()) {\n        getData(query);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }, [query, getData]);\n\n  function handleSearchClick(ev) {\n    ev.target.blur();\n  }\n\n  function handleSearchSubmit(ev) {\n    ev.preventDefault();\n    setMovies([]);\n    setShowNothingFoundMsg(false);\n    setSearchParams(movieNameInput.trim() ? { query: movieNameInput.trim() } : {});\n    setMovieNameInput('');\n  }\n\n  return (\n    <>\n      <MovieSearchForm onSubmit={handleSearchSubmit}>\n        <label>Movie name input</label>\n        <input\n          onChange={({ target }) => setMovieNameInput(target.value)}\n          value={movieNameInput}\n          placeholder='Enter movie name'\n        />\n        <button type='submit' onClick={handleSearchClick}>\n          <FaMagnifyingGlass size={25} />\n        </button>\n      </MovieSearchForm>\n      {movies.length > 0 ? <Movies movies={movies} /> : null}\n      {showNothingFoundMsg ? <p>Sorry, we don't now such movie</p> : null}\n    </>\n  );\n}\n\nexport default MovieSearch\n","import styled from 'styled-components';\n\nexport const MovieList = styled.ul`\n  width: 100%;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 330px));\n  grid-auto-rows: minmax(350px, auto);\n  grid-gap: 16px;\n  justify-content: center;\n  list-style: none;\n`;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieItem = styled.li`\n  background-color: var(--color-card-bckg);\n  border-radius: 8px;\n  height: 440px;\n  transform: scale(1);\n\n  transition: transform 250ms ease-in-out;\n\n  &:hover, &:focus {\n    transform: scale(1.02);\n  }\n`;\n\nexport const MovieLink = styled(NavLink)`\n  width: 100%;\n  height: 100%;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n  padding: 16px;\n`;\n\nexport const ImageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 250px;\n  height: 350px;\n  border-radius: 8px;\n  overflow: clip;\n`;\n\nexport const MovieTitle = styled.h2`\n  font-size: 20px;\n  color: var(--color-text-dark);\n  text-align: center;\n  line-height: 1.2;\n`;\n","import { ImageWrapper, MovieLink, MovieTitle, MovieItem } from './MovieCard.styled';\nimport movieDefaultImg from '../../images/movie.webp';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nMovieCard.propTypes = {\n  id: PropTypes.number,\n  title: PropTypes.string,\n  poster: PropTypes.string,\n}\n\nfunction MovieCard({ id, title, poster }) {\n  const location = useLocation();\n\n  return (\n    <MovieItem>\n      <MovieLink to={`/movie/${id}`} state={{ from: location }}>\n        <ImageWrapper>\n          <img src={poster ? poster : movieDefaultImg} alt={title} />\n        </ImageWrapper>\n        <MovieTitle>{title}</MovieTitle>\n      </MovieLink>\n    </MovieItem>\n  );\n}\n\nexport default MovieCard\n","import { MovieList } from './Movies.styled';\nimport MovieCard from '../MovieCard/MovieCard';\nimport PropTypes from 'prop-types';\n\nMovies.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    poster: PropTypes.string,\n  })),\n}\n\nfunction Movies({ movies }) {\n\n  return (\n    <MovieList>\n      {movies.map(movie => (\n        <MovieCard key={movie.id} id={movie.id} poster={movie.poster} title={movie.title} />\n      ))}\n    </MovieList>\n\n  );\n}\n\nexport default Movies\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst ACCESS_KEY = 'fde4dd89a2c817f4c4efb19732e7d4a1';\nconst IMG_BASE_URL = 'http://image.tmdb.org/t/p/w500';\n\nexport async function fetchPopularMovies() {\n  const res = await axios.get('trending/movie/day', {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n\n  return filterMoviesData(res.data.results);\n}\n\nexport async function fetchMovieData(id) {\n  const res = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n  const { title, overview, poster_path, vote_average, genres } = res.data;\n\n  return {\n    title,\n    overview,\n    poster: poster_path ? IMG_BASE_URL + poster_path : null,\n    score: Math.floor(vote_average * 10),\n    genres,\n  };\n}\n\nexport async function fetchCastById(id) {\n  const res = await axios.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n\n  return res.data?.cast.map(({\n                               profile_path,\n                               name,\n                               character,\n                               gender,\n                               id,\n                             }) => ({\n    id,\n    photo: profile_path ? IMG_BASE_URL + profile_path : null,\n    name,\n    character,\n    gender,\n  }));\n}\n\nexport async function fetchReviewsById(id) {\n  const res = await axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: ACCESS_KEY,\n    },\n  });\n\n  return res.data?.results;\n}\n\nexport async function fetchMoviesByQuery(query) {\n  const res = await axios.get('search/movie', {\n    params: {\n      api_key: ACCESS_KEY,\n      query: query,\n    },\n  });\n\n  return filterMoviesData(res.data.results);\n}\n\nfunction filterMoviesData(movies) {\n  return movies.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster: poster_path ? IMG_BASE_URL + poster_path : null,\n  }));\n}\n"],"names":["MovieSearchForm","styled","_templateObject","_taggedTemplateLiteral","_searchParams$get","_useState","useState","_useState2","_slicedToArray","movieNameInput","setMovieNameInput","_useState3","_useState4","movies","setMovies","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState5","_useState6","showNothingFoundMsg","setShowNothingFoundMsg","query","get","getData","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchMoviesByQuery","sent","length","stop","_x","apply","arguments","useEffect","trim","err","console","log","_jsxs","_Fragment","children","onSubmit","ev","preventDefault","_jsx","onChange","_ref2","target","value","placeholder","type","onClick","blur","FaMagnifyingGlass","size","Movies","MovieList","MovieItem","MovieLink","NavLink","_templateObject2","ImageWrapper","_templateObject3","MovieTitle","_templateObject4","id","title","poster","location","useLocation","to","concat","state","from","src","movieDefaultImg","alt","map","movie","MovieCard","axios","ACCESS_KEY","IMG_BASE_URL","fetchPopularMovies","_fetchPopularMovies","res","params","api_key","abrupt","filterMoviesData","results","fetchMovieData","_fetchMovieData","_callee2","_res$data","overview","poster_path","vote_average","genres","_context2","score","Math","floor","fetchCastById","_x2","_fetchCastById","_callee3","_res$data2","_context3","cast","profile_path","name","character","gender","photo","fetchReviewsById","_x3","_fetchReviewsById","_callee4","_res$data3","_context4","_x4","_fetchMoviesByQuery","_callee5","_context5"],"sourceRoot":""}